{"meta":{"title":"站在巨人的肩上","subtitle":"才能看得更远","description":"","author":"许炜烽","url":"http://www.xuweifeng.top","root":"/"},"pages":[{"title":"categories","date":"2020-02-23T15:46:28.000Z","updated":"2020-02-23T15:43:19.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.xuweifeng.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-23T15:46:28.000Z","updated":"2020-02-23T15:40:51.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.xuweifeng.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Promise","slug":"Promise","date":"2020-02-26T15:44:04.000Z","updated":"2020-02-26T17:05:46.000Z","comments":true,"path":"2020/02/26/Promise/","link":"","permalink":"http://www.xuweifeng.top/2020/02/26/Promise/","excerpt":"","text":"Promise是什么？ Promise是异步编程的一种解决方案，ES6中一个非常重要和好用的特性。常见的使用场景是网络请求，当网络请求非常复杂时，就会出回调地狱(见下图) 夸张案例 然而Promise可以以一种非常优雅的方式来解决这个问题。 认识基本语法123456789101112//利用 setTimeout 来模拟 ajax 请求new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; // 成功调用 resolve('Hello world !') // 失败调用 reject(\"error message !\") &#125;,1000)&#125;).then(data =&gt; &#123; console.log(data);&#125;).catch(err =&gt; &#123; console.log(err);) 以上通过new Promise创建了一个Promise对象。 通常情况下，会根据请求数据的成功和失败来决定调用哪一个。 如果是成功的，那么通常会调用resolve(messsage)，这个时候，后续的then会被回调。 如果是失败的，那么通常会调用reject(error)，这个时候，后续的catch会被回调。 Promise的三种状态在我们开发中有异步操作时, 可以给异步操作包装一个Promise，异步操作之后会有三种状态。 pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。 fulfill：满足状态，当主动回调了resolve时，就处于该状态，并且会回调.then()。 reject：拒绝状态，当主动回调了reject时，就处于该状态，并且会回调.catch()。 Promise的链式调用执行then还是catch的时候都可以返回一个Promise对象，代码是可以进行链式调用的。 Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数。 Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数。 Promis的all方法使用12345678910111213141516//发送两次或多次请求可用Promise.call方法 Promise.all([ new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; resolve(&#123;name:'abc', age:18&#125;) //可对象 可字符串 &#125;,2000) &#125;), new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; resolve('result 2 !') //可对象 可字符串 &#125;,2000) &#125;), ]).then(results =&gt; &#123; console.log(results); //返回一个数组来保存 &#125;) 参考 coderwhy","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.xuweifeng.top/tags/JavaScript/"},{"name":"ES6","slug":"ES6","permalink":"http://www.xuweifeng.top/tags/ES6/"}]},{"title":"Vue的生命周期","slug":"Vue的生命周期","date":"2020-02-25T11:37:20.000Z","updated":"2020-02-26T16:12:40.000Z","comments":true,"path":"2020/02/25/Vue的生命周期/","link":"","permalink":"http://www.xuweifeng.top/2020/02/25/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"","text":"生命周期图示 new Vue——&gt;创建一个vue实例 init()——&gt;初始化空的vue对象 beforecreate——&gt;data &amp; methods 还未初始化 created——&gt;data &amp; methods 已经初始化好，此时可调用methods方法、使用data中的数据(最早) compile template——&gt;编译模板在内存中生成DOM树，但此时未加载到页面上 beforeMount——&gt;模板尚未挂载至页面，页面仍未更新 create vm.$el &amp; replace el with it——&gt;将内存中编译好的模板替换至页面上,此时可操作页面Dom(最早) mounted——&gt;实例初始化加载完毕，进入运行阶段 beforeUpdate——&gt;data changed,data中数据已更新，页面上的数据仍未更新 virtual DOM re-render and patch——&gt;根据data的数据在内存中重新渲染新DOM树，更新完毕再将其渲染到页面- (model—&gt;view) updated——&gt;页面中的data更新了 beforeDestroy——&gt;运行—&gt;销毁，此时data/methods等仍可用，并未真正销毁 destroyed——&gt;everything is null","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.xuweifeng.top/tags/Vue/"},{"name":"前端框架","slug":"前端框架","permalink":"http://www.xuweifeng.top/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"}]},{"title":"邂逅Vuejs","slug":"邂逅Vuejs","date":"2020-02-25T10:30:26.000Z","updated":"2020-02-26T16:15:37.000Z","comments":true,"path":"2020/02/25/邂逅Vuejs/","link":"","permalink":"http://www.xuweifeng.top/2020/02/25/%E9%82%82%E9%80%85Vuejs/","excerpt":"","text":"简单认识Vuejs 为什么要学习Vuejs？ 招聘前端的需求中，10个有8个都对Vue有或多或少的要求。 当然，作为学习者我们知道Vuejs目前非常火，可以说是前端必备的一个技能。 近两年前端技术变革速度太快，vue不论针对web项目开发，网站制作，还是app，小程序开发，都越来越流行，其便捷性及易用程度都让你不得不考虑去学习。 Vuejs是什么？ Vue是一个渐进式的框架，那什么是渐进式的呢？ 渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。 或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。 比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。 Vue有很多特点和Web开发中常见的高级功能 解耦视图和数据 可复用的组件 前端路由技术 状态管理 虚拟DOM 学习Vuejs的前提？ 需具备一定的HTML、CSS、JavaScript基础。 开始Vue.js之旅Vue.js安装使用一个框架之前我们要下载安装它。 方式一：直接CDN引入 12345&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt; 方式二：下载和引入 开发环境 https://vuejs.org/js/vue.js 生产环境 https://vuejs.org/js/vue.min.js 方式三：NPM安装","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.xuweifeng.top/tags/Vue/"},{"name":"前端框架","slug":"前端框架","permalink":"http://www.xuweifeng.top/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"}]},{"title":"关于搭建此博客","slug":"此博客的搭建","date":"2020-02-23T13:32:50.000Z","updated":"2020-02-26T16:08:46.000Z","comments":true,"path":"2020/02/23/此博客的搭建/","link":"","permalink":"http://www.xuweifeng.top/2020/02/23/%E6%AD%A4%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/","excerpt":"","text":"搭建前工作 写作工具 MarkDown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 语法简洁明了、学习容易，而且功能比纯文本更强。 搭建平台 Github Pages GitHub Pages旨在从GitHub存储库托管您的个人，组织或项目页面。 面对全球最大的开源社区,用户生态良好 国内访问速度慢 框架主题 Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 插件丰富,拓展性强 hexo-theme-material-indigo Material Design 风格的Hexo主题，基于 Hexo 3.0+ 制作。 去jQuery化以提高代码速度,更加相信现代浏览器的原生兼容性 准备工具 Git 用来管理博客代码 Node.js Hexo基于Node.js开发,下载Hexo及其主题与插件都需要用到其中的npm工具 开始搭建 所有的命令指令都需要在Hexo根目录下执行 安装hexo框架 打开命令行(管理者模式),通过npm工具下载hexo框架 npm install hexo-cli -g 创建一个blog文件夹,并在这个文件夹中初始化一个hexo框架 hexo init blog 进入blog文件夹,也就是整个Hexo站点的根目录 cd blog 安装hexo所需要的文件 npm install 启动hexo hexo server #简写 hexo s 通过http://localhost:4000/在浏览器中访问生成的博客 目录结构 _config.yml： //Hexo配置文件,网站的配置信息node_modules： //依赖包public： //存放生成的页面scaffolds： //生成文章的一些模板themes： //存放主题包source： //用来存放你的文章 _drafts： //草稿 _posts： //文章 Hexo配置 在文件根目录下的_config.yml文件配置，详细参考官方的配置描述。 indigo安装与配置 indigo安装 使用git命令，执行以下命令安装 git clone https://github.com/yscoder/hexo-theme-indigo.git 安装完打开themes文件夹可看见相对于的主题文件 打开根目录下的_config.yml对theme属性编辑 theme: indigo #这里填写的主题名字 在命令行输入hexo g 生成静态文件 再输入hexo s进行重启服务器 通过http://localhost:4000/在浏览器中访问生成的主题博客 indigo配置 修改主题目录下的_config.yml文件,详细可参考主题作者的配置说明描述。 部署到GitHub Pages hexo clean #清除本地缓存,也可以跳过这一步hexo generate #生成静态资源 简写:hexo ghexo deploy #部署资源 简写:hexo d","categories":[],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://www.xuweifeng.top/tags/Blog/"}]}]}