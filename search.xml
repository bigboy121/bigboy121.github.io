<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue项目中使用elementUI的el-tabs组件跳转页面卡死问题</title>
      <link href="/2020/04/22/18/"/>
      <url>/2020/04/22/18/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p>在使用了<code>el-tabs</code>元素的页面，使用<code>el-row</code>、<code>el-col</code>元素来包裹<code>el-tabs</code>元素，可解决页面卡死问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tempalte&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-row&gt;</span><br><span class="line">      &lt;el-col&gt;</span><br><span class="line">        &lt;el-tabs&gt;</span><br><span class="line">          &lt;el-tab-pane&gt;test 1&lt;&#x2F;el-tab-pane&gt;</span><br><span class="line">          &lt;el-tab-pane&gt;test 2&lt;&#x2F;el-tab-pane&gt;</span><br><span class="line">        &lt;&#x2F;el-tabs&gt;</span><br><span class="line">      &lt;&#x2F;el-col&gt;</span><br><span class="line">    &lt;&#x2F;el-row&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决缺失 core-js 的问题,遇到core-js/modules/es6.regexp.replace...</title>
      <link href="/2020/04/15/17/"/>
      <url>/2020/04/15/17/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p>版本缺失 core-js 问题</p><p>运行以下代码即可解决问题</p><p><code>npm install core-js@3.6.4 --save</code></p><p>or</p><p><code>yarn add core-js@3.6.4 --save</code></p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue动态加载本地图片</title>
      <link href="/2020/04/14/16/"/>
      <url>/2020/04/14/16/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in listData"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"iconURL(item)"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>&#123;&#123;item.info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据情况定义好结构</span></span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    listData: [</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">"message.svg"</span>, <span class="attr">info</span>: <span class="string">"我的消息"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">"pointer.svg"</span>, <span class="attr">info</span>: <span class="string">"积分商城"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">"vip.svg"</span>, <span class="attr">info</span>: <span class="string">"会员卡"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">"cart.svg"</span>, <span class="attr">info</span>: <span class="string">"我的购物车"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">icon</span>: <span class="string">"shopping.svg"</span>, <span class="attr">info</span>: <span class="string">"下载购物APP"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  iconURL(item) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'assets/img/profile/'</span> + item.icon)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的toast弹窗组件</title>
      <link href="/2020/04/14/15/"/>
      <url>/2020/04/14/15/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h3 id="一-先创建一个vue组件"><a href="#一-先创建一个vue组件" class="headerlink" title="一.先创建一个vue组件"></a>一.先创建一个vue组件</h3><p>文件位置（考虑到多处复用，即放在公共组件文件夹中): <code>/src/components/common/toast/Toast.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toast"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript"> name: <span class="string">'Toast'</span>,</span></span><br><span class="line"> data() &#123;</span><br><span class="line"><span class="actionscript">   <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">     message: <span class="string">'i am message!!'</span>,</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.toast</span>&#123;</span></span><br><span class="line">  position: fixed;</span><br><span class="line"><span class="css">  <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%,-50%);</span><br><span class="line"></span><br><span class="line">  padding: 10px;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-在所需页面引入组件"><a href="#二-在所需页面引入组件" class="headerlink" title="二.在所需页面引入组件"></a>二.在所需页面引入组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">toast</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">"components/common/toast/Toast"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'Home'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Toast</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成后看看效果</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdtalkvr2bj30hw09qt9b.jpg" alt="效果图"></div><div class="image-caption">效果图</div></figure><h3 id="三-实现动态加载组件"><a href="#三-实现动态加载组件" class="headerlink" title="三.实现动态加载组件"></a>三.实现动态加载组件</h3><p>考虑到多个组件会复用，若按照上面方法导入使用太麻烦，接下来实现动态加载组件。</p><p><strong>在<code>main.js</code>添加以下代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> toast <span class="keyword">from</span> <span class="string">'components/common/toast'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装插件 调用vue.use，本质上会调用toast对象，会执行index.js文件的obj.install方法。</span></span><br><span class="line">Vue.use(toast)</span><br></pre></td></tr></table></figure><p><strong>在<code>toast</code>目录下新建<code>index.js</code>,写入以下代码 :</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入组件</span></span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'./Toast'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认传入Vue参数</span></span><br><span class="line">obj.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 创建组件构造器</span></span><br><span class="line">  <span class="keyword">const</span> toastContrustor = Vue.extend(Toast)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. new的方式，根据组件构造器，创建一个组件对象</span></span><br><span class="line">  <span class="keyword">const</span> toast = <span class="keyword">new</span> toastContrustor()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 将组件对象 手动挂载到某一个元素上</span></span><br><span class="line">  toast.$mount(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. toast.$el对应的就是div</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(toast.$el)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 在vue原型上添加,其他地方就可以调用了</span></span><br><span class="line">  Vue.prototype.$toast = toast</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> obj</span><br></pre></td></tr></table></figure><p><strong>优化toast组件以便使用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toast"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"Toast"</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      message: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">false</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show(message, duration = 2000) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.isShow = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.message = message;</span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isShow = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.message = <span class="string">""</span>;</span></span><br><span class="line">      &#125;, duration);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 样式不变 */</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四-所需页面中使用"><a href="#四-所需页面中使用" class="headerlink" title="四.所需页面中使用"></a>四.所需页面中使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>点击显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">"components/common/toast/Toast"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'Home'</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      message: <span class="string">'i am message !! '</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnClick() &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 根据情况传入message &amp;&amp; time </span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$toast.show(<span class="keyword">this</span>.message)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdtag28ghkg30iu098146.gif" alt="效果图"></div><div class="image-caption">效果图</div></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue报错vue-router.esm.js?8c4f:2007 Uncaught (in promise) NavigationDuplicated...</title>
      <link href="/2020/04/13/14/"/>
      <url>/2020/04/13/14/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdryk8skgsj30tg042jvr.jpg" alt="显示的错误"></div><div class="image-caption">显示的错误</div></figure><p>解决方法一: 在当前项目运行 <code>npm install vue-router@3.0 --save</code></p><p>解决方法二:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> routerPush = Router.prototype.push</span><br><span class="line">Router.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> routerPush.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">error</span>=&gt;</span> error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See URL报错</title>
      <link href="/2020/04/12/13/"/>
      <url>/2020/04/12/13/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p>使用vue开发移动端页面时，提示如下错误，并且点击事件不触发，PC端正常</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdqsinrfxvj30th08oaor.jpg" alt="显示的错误"></div><div class="image-caption">显示的错误</div></figure><p>解决：全局样式添加 <strong>{touch-action: pan-y;}</strong> , <strong>pan-y</strong>表示启用单指垂直平移手势(上下滑动事件)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">touch-action</span>: pan-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用防抖解决刷新频繁</title>
      <link href="/2020/04/10/12/"/>
      <url>/2020/04/10/12/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p>在<a href="http://www.xuweifeng.top/2020/03/26/11-%E8%A7%A3%E5%86%B3%E4%BD%BF%E7%94%A8better-scroll%E4%BA%A7%E7%94%9F%E7%9A%84%E6%BB%9A%E5%8A%A8bug/">上一篇文章</a>中解决了使用BScroll产生的滚动高度问题bug,方式是在图片中监听加载，监听加载完成后就执行一次refresh()，刷新scrollHeight的值，但若每加载一张图片，就执行一次refresh(),事件处理函数调用的频率无限制，会加重浏览器的负担，会导致用户体验变差。此时我们可以采用debounce（防抖）的方式来减少调用频率，同时又不影响实际效果。</p><p>函数防抖（debounce）：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debounce(func, delay=<span class="number">500</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer) timer = clearInterval(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件内使用直接传入refresh函数即可，可根据情况来设置延迟时间。</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> BScroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决使用Better-Scroll产生的滚动bug</title>
      <link href="/2020/03/26/11/"/>
      <url>/2020/03/26/11/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p><strong>1.</strong> 在使用Better-Scroll编写滚动区域时，，发现组件加载完图片后，多次发现可滚动区域有问题。然后通过<code>console.log(scroll)</code>打印scroll对象的属性，发现Better-Scroll在决定有多少区域可以滚动时, 是根据scrollerHeight属性决定.</p><p><strong>2.</strong> scrollerHeight属性是根据放Better-Scroll的content中的子组件的高度</p><p><strong>3.</strong> 但在首页中, 刚开始在计算scrollerHeight属性时, 是没有将图片计算在内的所以, 计算出来的高度会有错误！</p><p><strong>4.</strong> 后来图片加载进来之后有了新的高度, 但scrollerHeight属性并没有进行更新,因此滚动区域出现了问题.</p><p><strong>5.</strong> 解决这个滚动问题</p><ul><li>监听每一张图片是否加载完成, 只要有一张图片加载完成了, 执行一次refresh(),重新计算better-scroll.</li></ul><p><strong>6.</strong> 如何监听图片加载完成了</p><ul><li><p>原生的js监听图片: img.onload = function() {}</p></li><li><p>Vue中监听: @load=’方法’</p></li><li><p>调用scroll的refresh()</p></li></ul><p><strong>7.</strong> 如何将非父子组件的事件进行传递？</p><ul><li><p>因为涉及到非父子组件的通信, 所以这里我们选择了<strong>事件总线</strong></p><ul><li>bus -&gt;总线</li><li>Vue.prototype.$bus = new Vue()</li><li>this.bus.emit(‘事件名称’, 参数)</li><li>this.bus.on(‘事件名称’, 回调函数(参数))</li></ul></li><li><p>由于没有此事件，需要在vue原型上添加</p><ul><li>new一个Vue实例作为事件总线</li><li>Vue.prototype.$bus = new Vue()</li></ul></li><li><p>完成后即可调用</p><ul><li>this.$bus.$emit(‘eventName’)</li><li>this.$bus.$on(‘eventName’, () =&gt; { … })</li></ul></li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> BScroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件使用better-scroll</title>
      <link href="/2020/03/24/10/"/>
      <url>/2020/03/24/10/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p><code>BetterScroll 中文文档链接</code><br><a href="https://ustbhuangyi.github.io/better-scroll/#/zh" target="_blank" rel="noopener">https://ustbhuangyi.github.io/better-scroll/#/zh</a></p><h3 id="使用better-scroll的注意事项"><a href="#使用better-scroll的注意事项" class="headerlink" title="使用better-scroll的注意事项"></a>使用better-scroll的注意事项</h3><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="http://static.galileo.xiaojukeji.com/static/tms/shield/scroll-4.png" alt="官方文档图"></div><div class="image-caption">官方文档图</div></figure><p>绿色部分为 wrapper，也就是父容器，它会有固定的高度。黄色部分为 content，它是父容器的第一个子元素，它的高度会随着内容的大小而撑高。那么，当 content 的高度不超过父容器的高度，是不能滚动的，而它一旦超过了父容器的高度，我们就可以滚动内容区了，这就是 better-scroll 的滚动原理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      background-color: red;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>此li代替100行li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导入bscroll.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bscroll.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 默认情况下BScroll是不可以实时的监听滚动位置</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// probeType 侦测类型</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 0 、1 ：都是不侦测实时的位置</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2 ：在手指滚动的过程中侦测, 手指离开后的惯性滚动过程中不侦测.</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 3 ：只要是滚动, 都侦测.</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> bscroll = <span class="keyword">new</span> BScroll(<span class="built_in">document</span>.querySelector(<span class="string">'.content'</span>), &#123;</span></span><br><span class="line">    probeType: 3,</span><br><span class="line"><span class="actionscript">    click: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">    pullUpLoad: <span class="literal">true</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  bscroll.on(<span class="string">'scroll'</span>, (position) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(position);</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  bscroll.on(<span class="string">'pullingUp'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'上拉加载更多'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 发送网络请求, 请求更多页的数据</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 等数据请求完成, 并且将新的数据展示出来后</span></span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">      bscroll.finishPullUp()</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'触发点击！'</span>);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> BScroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios的使用</title>
      <link href="/2020/03/17/09/"/>
      <url>/2020/03/17/09/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h2 id="Axios-的基本使用"><a href="#Axios-的基本使用" class="headerlink" title="Axios 的基本使用"></a>Axios 的基本使用</h2><h3 id="首先安装axios"><a href="#首先安装axios" class="headerlink" title="首先安装axios"></a>首先安装axios</h3><p><code>npm install axios --save</code></p><p>通过inport 导入 axios<br><code>import axios from &#39;axios&#39;</code></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="comment">// axios 返回一个Promise</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟地址</span></span><br><span class="line">  url: <span class="string">'http://123.222.33.44:8000/test'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 若不传请求发送方式，默认为get请求.</span></span><br><span class="line">  method: <span class="string">'post'</span></span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="针对get请求的使用"><a href="#针对get请求的使用" class="headerlink" title="针对get请求的使用"></a>针对get请求的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  <span class="comment">// 模拟地址</span></span><br><span class="line">  url: <span class="string">'http://123.222.33.44:8000/api/home/data'</span>,</span><br><span class="line">  <span class="comment">// 专门针对get请求的参数拼接</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">'new'</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios发送并发请求"><a href="#axios发送并发请求" class="headerlink" title="axios发送并发请求"></a>axios发送并发请求</h2><p>通过<code>axios.all</code>可以进行放入多个请求</p><p>axios.all([]) 返回的结果是一个数组,使用<code>axios.spread</code>可将数组 <code>[res1,res2]</code>展开为 <code>res1</code>, <code>res2</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// axios 提取全局配置  公共写到全局</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://123.222.33.44:8000'</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">  <span class="comment">// baseURL: 'http://123.222.33.44:8000',</span></span><br><span class="line">  <span class="comment">// timeout: 5,</span></span><br><span class="line">  url: <span class="string">'/home/multidata'</span>,</span><br><span class="line">&#125;),axios(&#123;</span><br><span class="line">  <span class="comment">// baseURL: 'http://123.222.33.44:8000',</span></span><br><span class="line">  <span class="comment">// timeout: 5,</span></span><br><span class="line">  url: <span class="string">'/api/home/data'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">'new'</span>,</span><br><span class="line">    page: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).then( axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1);</span><br><span class="line">  <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>在上面的示例中, 我们的<code>BaseURL</code>是固定的，在开发中可能很多参数都是固定的.<br>这个时候我们可以进行一些抽取, 也可以利用<code>axiox</code>的全局配置.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = ‘<span class="number">123.222</span><span class="number">.33</span><span class="number">.44</span>:<span class="number">8000</span>’</span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span></span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><h3 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h3><p><code>请求地址：</code> url: ‘/user’,</p><p><code>请求类型：</code> method: ‘get’,</p><p><code>请根路径：</code> baseURL: ‘<a href="http://www.mt.com/api&#39;" target="_blank" rel="noopener">http://www.mt.com/api&#39;</a> ,</p><p><code>请求前的数据处理：</code> transformRequest:[function(data){}],</p><p><code>请求后的数据处理：</code> transformResponse: [function(data){}],</p><p><code>自定义的请求头：</code> headers:{‘x-Requested-With’:’XMLHttpRequest’},</p><p><code>URL查询对象：</code> params:{ id: 12 },</p><p><code>查询对象序列化函数：</code> paramsSerializer: function(params){ }</p><p><code>request body：</code> data: { key: ‘aa’},</p><p><code>超时设置ms：</code> timeout: 1000,</p><p><code>跨域是否带Token：</code> withCredentials: false,</p><p><code>自定义请求处理：</code> adapter: function(resolve, reject, config){},</p><p><code>身份验证信息：</code> auth: { uname: ‘’, pwd: ‘12’},</p><p><code>响应的数据格式 json / blob /document /arraybuffer / text / stream：</code> responseType: ‘json’,</p><h2 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h2><ul><li>为什么要创建axios的实例?<ul><li>当我们从axios模块中导入对象时, 使用的实例是默认的实例.</li><li>当给该实例设置一些默认配置时, 这些配置就被固定下来了.</li><li>但是后续开发中, 某些配置可能会不太一样.</li><li>比如某些请求需要使用特定的baseURL或者timeout等.</li><li>这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例instance1</span></span><br><span class="line"><span class="keyword">const</span> instance1 = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://123.222.33.44:8000'</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例instance2</span></span><br><span class="line"><span class="keyword">const</span> instance2 = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://222.333.33.44:8000'</span>,</span><br><span class="line">  timeout: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">  url: <span class="string">'/home/multidata'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">  url: <span class="string">'/api/home/data'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">'new'</span>,</span><br><span class="line">    page: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance2(&#123;</span><br><span class="line">  url: <span class="string">'/home/multidata'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h2><p>通常我们的项目会越做越大,页面也会越来越多,如果页面非常的少,直接用axios也没有什么大的影响,那页面组件多了起来,上百个接口呢,这个时候后端改了接口,多加了一个参数什么的呢?那就只有找到那个页面,进去修改.整个过程很繁琐不易于项目的维护和迭代.</p><p>这个时候如果我们统一的区管理接口,需要修改某一个接口的时候直接在api里修改对应的请求不是很方便，所以就可以进行针对封装.</p><p>下面来简单实现axios的封装：</p><p><code>封装代码</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://123.222.33.44:8000'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回实例</span></span><br><span class="line">  <span class="comment">// 由于axios返回的是一个Promise，所以可直接返回实例出去，在调用的时可直接使用 .then / .catch</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>调用代码</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'./network/request'</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">'/home/multidata'</span></span><br><span class="line">&#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><p>请求成功 请求失败</p><p>响应成功 响应失败</p><p><code>拦截代码：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://123.207.32.32:8000'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2axios的拦截器</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.1 请求拦截</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拦截使用场景</span></span><br><span class="line">    <span class="comment">// config 中的一些信息不符合服务器的需求 需要过滤</span></span><br><span class="line">    <span class="comment">// 每次发送网络请求时，都希望在界面中显示一个图标</span></span><br><span class="line">    <span class="comment">// 某些网络请求（登录(token)），必须携带一些特殊的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求成功拦截：'</span> + config);</span><br><span class="line">    <span class="comment">// 拦截成功后需要返回出去</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求失败拦截：'</span> + err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2 响应拦截</span></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应成功拦截：'</span> + res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截成功后根据所需要的数据返回出去</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'响应失败拦截：'</span> + err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.发送网络请求</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>调用代码：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'./network/request'</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">'/home/multidata'</span></span><br><span class="line">&#125;).then( <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex （二） 5 个核心基本使用</title>
      <link href="/2020/03/17/08/"/>
      <url>/2020/03/17/08/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h2 id="Vuex-核心使用"><a href="#Vuex-核心使用" class="headerlink" title="Vuex 核心使用"></a>Vuex 核心使用</h2><p>Vuex 的几个核心</p><ul><li><code>State</code></li><li><code>Getters</code></li><li><code>Mutations</code></li><li><code>Action</code></li><li><code>Modules</code></li></ul><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>上面已定义好相关的属性值，现在来看看在组件中如何使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.state.count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"upDataCount"</span>&gt;</span>修改Stote.state.count的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line"><span class="actionscript">  data() &#123; <span class="keyword">return</span> &#123;&#125; &#125;,</span></span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">   upDataCount() &#123;</span><br><span class="line"><span class="actionscript">     <span class="keyword">this</span>.$store.state.count = <span class="number">10</span></span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>当从我们从 State 获取到的数据时，有时候数据并不是我们直接想要的，而是需要经过相应的处理后，才能满足我们的需求，这个时候就可以使用 Getters。</p><blockquote><p>例： 从以下 State 中定义的 students 数组中获取年龄大于 20 的数组对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    students: [</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">'ABC1'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">'ABC2'</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">'ABC3'</span>, <span class="attr">age</span>: <span class="number">41</span> &#125;</span><br><span class="line">      &#123;<span class="attr">name</span>: <span class="string">'ABC4'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在 Store 中定义 getters</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="comment">// 获取年龄大于20的</span></span><br><span class="line">  getCount(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.students.filter(<span class="function"><span class="params">s</span> =&gt;</span> s.age &gt; <span class="number">20</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第二个参数可回调getters</span></span><br><span class="line">  getAgeCountLen(state,getters) &#123;</span><br><span class="line">    <span class="keyword">return</span> getters.getCount.length</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 外部传入参数的使用方法</span></span><br><span class="line">  getAgeCount: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">Age</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.students.filter( <span class="function"><span class="params">s</span> =&gt;</span> s.age &gt; Age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么如何在组件中获取到并展示呢？ 下面来看代码</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--获取年龄大于20的数组对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.getCount&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--获取年龄大于20的数组对象的长度--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.getCountLen&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--获取年龄大于30的数组对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.getAgeCount(30)&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><h4 id="Mutation-状态更新"><a href="#Mutation-状态更新" class="headerlink" title="Mutation 状态更新"></a>Mutation 状态更新</h4><ul><li><p>Vuex 的 store 状态的更新唯一方式：提交 Mutation</p></li><li><p>Mutation 主要包括两部分：</p><ul><li>字符串的事件类型（type）</li><li>一个回调函数（handler）, 该回调函数的第一个参数就是 state。</li></ul></li><li><p>mutation 的定义方式：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment(state) &#123;</span><br><span class="line">    state.count++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 mutation 更新</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">increment: funciton() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutation-传递参数"><a href="#Mutation-传递参数" class="headerlink" title="Mutation 传递参数"></a>Mutation 传递参数</h4><ul><li><p>在通过 mutation 更新数据的时候，有可能我们希望携带一些额外的参数</p><ul><li>参数被称为是 mutation 的载荷 (Payload)</li></ul></li><li><p>Mutation 中的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Mutation 中的代码：</span></span><br><span class="line"> decrement(state, n)&#123;</span><br><span class="line">   state.count += n</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//  组件 中的代码：</span></span><br><span class="line"> drement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>, <span class="number">2</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Mutation常量类型"><a href="#Mutation常量类型" class="headerlink" title="Mutation常量类型"></a>Mutation常量类型</h4><ul><li><p>创建一个文件: mutation-types.js, 并且在其中定义我们的常量.</p></li><li><p>定义常量时, 可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</p></li><li><p>Mutation常量类型 – 代码</p></li></ul><hr><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcwzvh1n1rj30c001n0sn.jpg" alt=""></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcwzwemjv7j30cw090gm2.jpg" alt=""></div><div class="image-caption"></div></figure><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcwzxb6lgij30cn0900t4.jpg" alt=""></div><div class="image-caption"></div></figure><ul><li>不要在Mutation中进行异步操作.<ul><li>在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候可以使用Action来代替Mutation进行异步操作的.</li></ul></li></ul><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><ul><li>Action返回的Promise进行异步操作<br>在Action中, 我们可以将异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject.</li></ul><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcx0547b41j30cr093q3e.jpg" alt=""></div><div class="image-caption"></div></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Module局部状态<br>具体的局部模块中的代码如下书写.</p><ul><li>我们在moduleA中添加state、mutations、getters</li><li>mutation和getters接收的第一个参数是局部状态对象</li></ul><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcx07d46wvj30h808naag.jpg" alt=""></div><div class="image-caption"></div></figure><p>Actions的参数写法</p><ul><li>接收一个context参数对象<br>局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</li></ul><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcx0c4exnrj30cy04ojrg.jpg" alt=""></div><div class="image-caption"></div></figure><ul><li>如果getters中也需要使用全局的状态, 可以接受更多的参数</li></ul><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcx0dcze5gj309p03t0sq.jpg" alt=""></div><div class="image-caption"></div></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>Vuex管理过多当内容时，可将上面当核心属性进行抽离管理，方便维护</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcx0feak2tj30dx06w3yr.jpg" alt=""></div><div class="image-caption"></div></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于箭头函数中的this</title>
      <link href="/2020/03/10/07/"/>
      <url>/2020/03/10/07/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h4 id="一-箭头函数本身不创建this"><a href="#一-箭头函数本身不创建this" class="headerlink" title="一.箭头函数本身不创建this"></a>一.箭头函数本身不创建this</h4><p>箭头函数本身没有this，但是在它声明时可以捕获别人的this供自己使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">// 指向window</span></span></span><br><span class="line">  &#125;,1000)</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">// 指向window</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二-作用域中的this"><a href="#二-作用域中的this" class="headerlink" title="二.作用域中的this"></a>二.作用域中的this</h4><p>箭头函数中的this是通过捕获而来</p><p>箭头函数中的this是在它声明时捕获它所处作用域中的this。</p><p>下面通过代码实例演示一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="actionscript">  test () &#123;  <span class="comment">//通过call 传来一个window</span></span></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// window</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//箭头函数中的this是如何查找的 ?</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//向外层作用域中，一层层查找this 直到有this的定义</span></span></span><br><span class="line"><span class="javascript">  setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// test  指向obj中的对象</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.test()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> obj = &#123;</span></span><br><span class="line">  test () &#123;</span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">// window</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">// window</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">// window</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">// test </span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.test()</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue初体验</title>
      <link href="/2020/03/04/06/"/>
      <url>/2020/03/04/06/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p>Vue编程范式属于声明式编程</p><h2 id="初始编写"><a href="#初始编写" class="headerlink" title="初始编写"></a>初始编写</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> <span class="comment">&lt;!-- 被管理的元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="actionscript">data: &#123; <span class="comment">// 定义数据</span></span></span><br><span class="line"><span class="actionscript">message: <span class="string">'hello!'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>阅读以上代码，可以发现创建来一个Vue对象。</p><p>对象里面传入了一些options：{ }</p><ul><li><p><code>el</code>： 该属性决定这个Vue对象挂载到哪一个元素上 ，上面代码可以看出是挂载到了app到元素上。</p></li><li><p><code>data</code>： 该属性是存储一些数据。</p><ul><li>数据来源可是直接定义出来的。</li><li>数据来源也可以是来自网络， 从服务器加载来。</li></ul></li></ul><p>当数据发生改变的时候，页面会自动发生响应。</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex (一)</title>
      <link href="/2020/02/27/05/"/>
      <url>/2020/02/27/05/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h2 id="认识Vuex"><a href="#认识Vuex" class="headerlink" title="认识Vuex"></a>认识Vuex</h2><h3 id="Vuex是什么？"><a href="#Vuex是什么？" class="headerlink" title="Vuex是什么？"></a>Vuex是什么？</h3><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><p>它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>Vuex 也集成到 Vue 的官方调试工具 <code>devtools extension</code>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h3 id="状态管理是什么？"><a href="#状态管理是什么？" class="headerlink" title="状态管理是什么？"></a>状态管理是什么？</h3><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。<br>但可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。<br>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。<br>那这样带来但便利是什么呢？其目的就是为了响应式，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它！用它！用它！</p><h3 id="管理什么状态呢"><a href="#管理什么状态呢" class="headerlink" title="管理什么状态呢?"></a>管理什么状态呢?</h3><p>有什么状态时需要我们在多个组件间共享的呢？在做过大型开发时，一定遇到过多个状态，在多个界面间的共享问题。</p><ol><li><p>比如用户的登录状态、用户名称、头像、地理位置信息等等。</p></li><li><p>比如商品的收藏、购物车中的物品等等。</p></li><li><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的</p></li></ol><h3 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h3><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。什么意思呢？我们来看下面的图片。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcbcclvep9j3094065mx4.jpg" alt=""></div><div class="image-caption"></div></figure><p>这图片中的三种东西，怎么理解呢？</p><ul><li><code>State</code>：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）</li><li><code>View</code>：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）</li><li><code>Actions</code>：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</li></ul><p>下面写点代码，来加深理解吧！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter--"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloVuex'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        counter: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让我们来通过上面的代码来了解一下流程图吧</p><ul><li><p>在这个案例中，我们有没有状态需要管理呢？没错，就是个数counter。</p></li><li><p>counter需要某种方式被记录下来，也就是我们的State。</p></li><li><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p></li><li><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），需要去更新状态，也就是我们的Actions</p></li></ul><h3 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h3><ol><li><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><ul><li>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）</li><li>不同界面的<code>Actions</code>都想修改同一个状态（<code>Home.vue</code>需要修改，<code>Profile.vue</code>也需要修改这个状态）</li></ul></li><li><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的</p><ul><li>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。</li><li>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</li><li>没错，<code>Vuex</code>就是为我们提供这个大管家的工具。</li></ul></li><li><p>全局单例模式（大管家）</p><ul><li>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。</li><li>之后，你们每个试图，按照我规定好的规定，进行访问和修改等操作。</li><li>这就是Vuex背后的基本思想。</li></ul></li></ol><h3 id="Vuex状态管理图例"><a href="#Vuex状态管理图例" class="headerlink" title="Vuex状态管理图例"></a>Vuex状态管理图例</h3><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcbct4ww3bj30d00a8dg2.jpg" alt="官方图片"></div><div class="image-caption">官方图片</div></figure><ol><li>在图例中，Vue官方建议我们通过Vue Components到action，然后在Mutations中修改我们的State，</li><li>Vue官方不建议我们直接修改State，否则Devtools这个官方给我们提供的浏览器调试工具就无法跟踪是哪一个组件修改了State，不利于我们项目的管理。</li><li>我们可以直接通过Mutations修改State，而Actions主要做异步操作（向后端发送网络请求），Mutations中主要是做同步操作。</li></ol><h2 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h2><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcbcwztdjqj303l01qmwx.jpg" alt="简单的案例"></div><div class="image-caption">简单的案例</div></figure><h3 id="1-引入Vuex"><a href="#1-引入Vuex" class="headerlink" title="1. 引入Vuex"></a>1. 引入Vuex</h3><p>首先，我们需要在某个地方存放我们的Vuex代码,这里，我们先创建一个文件夹store，并且在其中创建一个index.js文件,在index.js文件中写入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state) &#123;</span><br><span class="line">      state.counter--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="2-挂载到Vue实例中"><a href="#2-挂载到Vue实例中" class="headerlink" title="2. 挂载到Vue实例中"></a>2. 挂载到Vue实例中</h3><p>其次，我们让所有的Vue组件都可以使用这个store对象，来到main.js文件，导入store对象，并且放在new Vue中，这样，在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-使用Vuex的count"><a href="#3-使用Vuex的count" class="headerlink" title="3. 使用Vuex的count"></a>3. 使用Vuex的count</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloVuex'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      counter() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.counter</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好的，这就是使用Vuex最简单的方式了。</p><p>我们来对使用步骤，做一个简单的小节：</p><ul><li>1.提取出一个公共的store对象，用于保存在多个组件中共享的状态</li><li>2.将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</li><li>3.在其他组件中使用store对象中保存的状态即可<ul><li>通过this.$store.state.属性的方式来访问状态</li><li>通过this.$store.commit(‘mutation中方法’)来修改状态</li></ul></li></ul><p>注意事项：</p><ul><li>我们通过提交mutation的方式，而非直接改变store.state.count。</li><li>这是因为Vuex可以更明确的追踪状态的变化，所以不要直接改变store.state.count的值。</li></ul><p>参考</p><ul><li><a href="https://weibo.com/u/5887943391" target="_blank" rel="noopener">coderwhy</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2020/02/26/04/"/>
      <url>/2020/02/26/04/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><p>Promise是什么？</p><p><strong>Promise</strong>是异步编程的一种解决方案，ES6中一个非常重要和好用的特性。常见的使用场景是网络请求，当网络请求非常复杂时，就会出回调地狱(见下图)</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gca9rnzlrfj308w03omx7.jpg" alt="夸张案例"></div><div class="image-caption">夸张案例</div></figure><p>然而Promise可以以一种非常优雅的方式来解决这个问题。</p><h3 id="认识基本语法"><a href="#认识基本语法" class="headerlink" title="认识基本语法"></a>认识基本语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用 setTimeout 来模拟 ajax 请求</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功调用</span></span><br><span class="line">    resolve(<span class="string">'Hello world !'</span>)</span><br><span class="line">    <span class="comment">// 失败调用</span></span><br><span class="line">    reject(<span class="string">"error message !"</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);)</span><br></pre></td></tr></table></figure><p>以上通过new Promise创建了一个Promise对象。</p><p>通常情况下，会根据请求数据的成功和失败来决定调用哪一个。</p><p>如果是成功的，那么通常会调用resolve(messsage)，这个时候，后续的then会被回调。</p><p>如果是失败的，那么通常会调用reject(error)，这个时候，后续的catch会被回调。</p><hr><h3 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h3><p>在我们开发中有异步操作时, 可以给异步操作包装一个Promise，异步操作之后会有三种状态。</p><p><code>pending</code>：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p><p><code>fulfill</code>：满足状态，当主动回调了resolve时，就处于该状态，并且会回调.then()。</p><p><code>reject</code>：拒绝状态，当主动回调了reject时，就处于该状态，并且会回调.catch()。</p><hr><h3 id="Promise的链式调用"><a href="#Promise的链式调用" class="headerlink" title="Promise的链式调用"></a>Promise的链式调用</h3><p>执行then还是catch的时候都可以返回一个Promise对象，代码是可以进行链式调用的。</p><p><code>Promise.resovle()</code>：将数据包装成Promise对象，并且在内部回调<code>resolve()</code>函数。</p><p><code>Promise.reject()</code>：将数据包装成Promise对象，并且在内部回调<code>reject()</code>函数。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gcaafxd2nvj30bq0ba0tr.jpg" alt=""></div><div class="image-caption"></div></figure><hr><h3 id="Promis的all方法使用"><a href="#Promis的all方法使用" class="headerlink" title="Promis的all方法使用"></a>Promis的all方法使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送两次或多次请求可用Promise.call方法</span></span><br><span class="line">  <span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(&#123;<span class="attr">name</span>:<span class="string">'abc'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;) <span class="comment">//可对象 可字符串</span></span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'result 2 !'</span>) <span class="comment">//可对象 可字符串</span></span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  ]).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(results); <span class="comment">//返回一个数组来保存</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://weibo.com/u/5887943391?is_hot=1" target="_blank" rel="noopener">coderwhy</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2020/02/25/03/"/>
      <url>/2020/02/25/03/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h2 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h2><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gc8wfaeorqj30u023zn79.jpg" alt=""></div><div class="image-caption"></div></figure><hr><ul><li><code>new Vue:</code> 创建一个vue实例</li><li><code>init():</code> 初始化空的vue对象</li><li><code>beforecreate:</code> data &amp; methods 还未初始化</li><li><code>created:</code> data &amp; methods 已经初始化好，此时可调用methods方法、使用data中的数据(最早)</li><li><code>compile template:</code> 编译模板在内存中生成DOM树，但此时未加载到页面上</li><li><code>beforeMount:</code> 模板尚未挂载至页面，页面仍未更新</li><li><code>create vm.$el &amp; replace el with it:</code> 将内存中编译好的模板替换至页面上,此时可操作页面Dom(最早)</li><li><code>mounted:</code> 实例初始化加载完毕，进入运行阶段</li><li><code>beforeUpdate:</code> data changed,data中数据已更新，页面上的数据仍未更新</li><li><code>virtual DOM re-render and patch:</code> 根据data的数据在内存中重新渲染新DOM树，更新完毕再将其渲染到页面- (model—&gt;view)</li><li><code>updated:</code> 页面中的data更新了</li><li><code>beforeDestroy:</code> 运行—&gt;销毁，此时data/methods等仍可用，并未真正销毁</li><li><code>destroyed:</code> everything is null</li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅Vuejs</title>
      <link href="/2020/02/25/02/"/>
      <url>/2020/02/25/02/</url>
      
        <content type="html"><![CDATA[<!-- build time:Wed Apr 29 2020 11:17:24 GMT+0800 (GMT+08:00) --><h2 id="简单认识Vuejs"><a href="#简单认识Vuejs" class="headerlink" title="简单认识Vuejs"></a>简单认识Vuejs</h2><hr><h4 id="为什么要学习Vuejs？"><a href="#为什么要学习Vuejs？" class="headerlink" title="为什么要学习Vuejs？"></a>为什么要学习Vuejs？</h4><ul><li>招聘前端的需求中，10个有8个都对Vue有或多或少的要求。</li><li>当然，作为学习者我们知道Vuejs目前非常火，可以说是前端必备的一个技能。</li><li>近两年前端技术变革速度太快，vue不论针对web项目开发，网站制作，还是app，小程序开发，都越来越流行，其便捷性及易用程度都让你不得不考虑去学习。</li></ul><hr><h4 id="Vuejs是什么？"><a href="#Vuejs是什么？" class="headerlink" title="Vuejs是什么？"></a>Vuejs是什么？</h4><ul><li><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a>是一个渐进式的框架，那什么是渐进式的呢？</p><ul><li>渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。</li><li>或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。</li><li>比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</li></ul></li><li><p>Vue有很多特点和Web开发中常见的高级功能</p><ul><li>解耦视图和数据</li><li>可复用的组件</li><li>前端路由技术</li><li>状态管理</li><li>虚拟DOM</li></ul></li><li><p>学习Vuejs的前提？</p><ul><li>需具备一定的HTML、CSS、JavaScript基础。</li></ul></li></ul><hr><h2 id="开始Vue-js之旅"><a href="#开始Vue-js之旅" class="headerlink" title="开始Vue.js之旅"></a>开始Vue.js之旅</h2><h4 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h4><p>使用一个框架之前我们要下载安装它。</p><p>方式一：直接CDN引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt; </span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>方式二：下载和引入<br>开发环境 <a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a><br>生产环境 <a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></p><p>方式三：NPM安装</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
