<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于箭头函数中的this</title>
      <link href="/2020/03/10/%E5%85%B3%E4%BA%8E%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this/"/>
      <url>/2020/03/10/%E5%85%B3%E4%BA%8E%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><h4 id="一-箭头函数本身不创建this"><a href="#一-箭头函数本身不创建this" class="headerlink" title="一.箭头函数本身不创建this"></a>一.箭头函数本身不创建this</h4><p>箭头函数本身没有this，但是在它声明时可以捕获别人的this供自己使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">// 指向window</span></span></span><br><span class="line">  &#125;,1000)</span><br><span class="line">  </span><br><span class="line"><span class="javascript">  setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">// 指向window</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二-作用域中的this"><a href="#二-作用域中的this" class="headerlink" title="二.作用域中的this"></a>二.作用域中的this</h4><p>箭头函数中的this是通过捕获而来</p><p>箭头函数中的this是在它声明时捕获它所处作用域中的this。</p><p>下面通过代码实例演示一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="actionscript">  test () &#123;  <span class="comment">//通过call 传来一个window</span></span></span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// window</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//箭头函数中的this是如何查找的 ?</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//向外层作用域中，一层层查找this 直到有this的定义</span></span></span><br><span class="line"><span class="javascript">  setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// test  指向obj中的对象</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.test()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> obj = &#123;</span></span><br><span class="line">  test () &#123;</span><br><span class="line"><span class="actionscript">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">// window</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">// window</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">// window</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">// test </span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.test()</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue初体验</title>
      <link href="/2020/03/04/vue%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/03/04/vue%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><p>Vue编程范式属于声明式编程</p><h2 id="初始编写"><a href="#初始编写" class="headerlink" title="初始编写"></a>初始编写</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span> <span class="comment">&lt;!-- 被管理的元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">el: <span class="string">'#app'</span>, <span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="actionscript">data: &#123; <span class="comment">// 定义数据</span></span></span><br><span class="line"><span class="actionscript">message: <span class="string">'hello!'</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>阅读以上代码，可以发现创建来一个Vue对象。</p><p>对象里面传入了一些options：{ }</p><ul><li><p><code>el</code>： 该属性决定这个Vue对象挂载到哪一个元素上 ，上面代码可以看出是挂载到了app到元素上。</p></li><li><p><code>data</code>： 该属性是存储一些数据。</p><ul><li>数据来源可是直接定义出来的。</li><li>数据来源也可以是来自网络， 从服务器加载来。</li></ul></li></ul><p>当数据发生改变的时候，页面会自动发生响应。</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2020/02/27/Vuex%E7%9A%84%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/02/27/Vuex%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><h2 id="认识Vuex"><a href="#认识Vuex" class="headerlink" title="认识Vuex"></a>认识Vuex</h2><h3 id="Vuex是什么？"><a href="#Vuex是什么？" class="headerlink" title="Vuex是什么？"></a>Vuex是什么？</h3><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><p>它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>Vuex 也集成到 Vue 的官方调试工具 <code>devtools extension</code>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h3 id="状态管理是什么？"><a href="#状态管理是什么？" class="headerlink" title="状态管理是什么？"></a>状态管理是什么？</h3><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。<br>但可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。<br>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。<br>那这样带来但便利是什么呢？其目的就是为了响应式，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它！用它！用它！</p><h3 id="管理什么状态呢"><a href="#管理什么状态呢" class="headerlink" title="管理什么状态呢?"></a>管理什么状态呢?</h3><p>有什么状态时需要我们在多个组件间共享的呢？在做过大型开发时，一定遇到过多个状态，在多个界面间的共享问题。</p><ol><li><p>比如用户的登录状态、用户名称、头像、地理位置信息等等。</p></li><li><p>比如商品的收藏、购物车中的物品等等。</p></li><li><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的</p></li></ol><h3 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h3><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。什么意思呢？我们来看下面的图片。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcbcclvep9j3094065mx4.jpg" alt=""></div><div class="image-caption"></div></figure><p>这图片中的三种东西，怎么理解呢？</p><ul><li><code>State</code>：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）</li><li><code>View</code>：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）</li><li><code>Actions</code>：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</li></ul><p>下面写点代码，来加深理解吧！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter++"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter--"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloVuex'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        counter: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让我们来通过上面的代码来了解一下流程图吧</p><ul><li><p>在这个案例中，我们有没有状态需要管理呢？没错，就是个数counter。</p></li><li><p>counter需要某种方式被记录下来，也就是我们的State。</p></li><li><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p></li><li><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），需要去更新状态，也就是我们的Actions</p></li></ul><h3 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h3><ol><li><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><ul><li>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）</li><li>不同界面的<code>Actions</code>都想修改同一个状态（<code>Home.vue</code>需要修改，<code>Profile.vue</code>也需要修改这个状态）</li></ul></li><li><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的</p><ul><li>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。</li><li>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</li><li>没错，<code>Vuex</code>就是为我们提供这个大管家的工具。</li></ul></li><li><p>全局单例模式（大管家）</p><ul><li>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。</li><li>之后，你们每个试图，按照我规定好的规定，进行访问和修改等操作。</li><li>这就是Vuex背后的基本思想。</li></ul></li></ol><h3 id="Vuex状态管理图例"><a href="#Vuex状态管理图例" class="headerlink" title="Vuex状态管理图例"></a>Vuex状态管理图例</h3><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcbct4ww3bj30d00a8dg2.jpg" alt="官方图片"></div><div class="image-caption">官方图片</div></figure><ol><li>在图例中，Vue官方建议我们通过Vue Components到action，然后在Mutations中修改我们的State，</li><li>Vue官方不建议我们直接修改State，否则Devtools这个官方给我们提供的浏览器调试工具就无法跟踪是哪一个组件修改了State，不利于我们项目的管理。</li><li>我们可以直接通过Mutations修改State，而Actions主要做异步操作（向后端发送网络请求），Mutations中主要是做同步操作。</li></ol><h2 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h2><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gcbcwztdjqj303l01qmwx.jpg" alt="简单的案例"></div><div class="image-caption">简单的案例</div></figure><h3 id="1-引入Vuex"><a href="#1-引入Vuex" class="headerlink" title="1. 引入Vuex"></a>1. 引入Vuex</h3><p>首先，我们需要在某个地方存放我们的Vuex代码,这里，我们先创建一个文件夹store，并且在其中创建一个index.js文件,在index.js文件中写入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state) &#123;</span><br><span class="line">      state.counter--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="2-挂载到Vue实例中"><a href="#2-挂载到Vue实例中" class="headerlink" title="2. 挂载到Vue实例中"></a>2. 挂载到Vue实例中</h3><p>其次，我们让所有的Vue组件都可以使用这个store对象，来到main.js文件，导入store对象，并且放在new Vue中，这样，在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-使用Vuex的count"><a href="#3-使用Vuex的count" class="headerlink" title="3. 使用Vuex的count"></a>3. 使用Vuex的count</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.state.counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'HelloVuex'</span>,</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      counter() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.counter</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$store.commit(<span class="string">'decrement'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好的，这就是使用Vuex最简单的方式了。</p><p>我们来对使用步骤，做一个简单的小节：</p><ul><li>1.提取出一个公共的store对象，用于保存在多个组件中共享的状态</li><li>2.将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</li><li>3.在其他组件中使用store对象中保存的状态即可<ul><li>通过this.$store.state.属性的方式来访问状态</li><li>通过this.$store.commit(‘mutation中方法’)来修改状态</li></ul></li></ul><p>注意事项：</p><ul><li>我们通过提交mutation的方式，而非直接改变store.state.count。</li><li>这是因为Vuex可以更明确的追踪状态的变化，所以不要直接改变store.state.count的值。</li></ul><p>参考</p><ul><li><a href="https://weibo.com/u/5887943391" target="_blank" rel="noopener">coderwhy</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vuex </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2020/02/26/Promise/"/>
      <url>/2020/02/26/Promise/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><p>Promise是什么？</p><p><strong>Promise</strong>是异步编程的一种解决方案，ES6中一个非常重要和好用的特性。常见的使用场景是网络请求，当网络请求非常复杂时，就会出回调地狱(见下图)</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gca9rnzlrfj308w03omx7.jpg" alt="夸张案例"></div><div class="image-caption">夸张案例</div></figure><p>然而Promise可以以一种非常优雅的方式来解决这个问题。</p><h3 id="认识基本语法"><a href="#认识基本语法" class="headerlink" title="认识基本语法"></a>认识基本语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用 setTimeout 来模拟 ajax 请求</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 成功调用</span></span><br><span class="line">    resolve(<span class="string">'Hello world !'</span>)</span><br><span class="line">    <span class="comment">// 失败调用</span></span><br><span class="line">    reject(<span class="string">"error message !"</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);)</span><br></pre></td></tr></table></figure><p>以上通过new Promise创建了一个Promise对象。</p><p>通常情况下，会根据请求数据的成功和失败来决定调用哪一个。</p><p>如果是成功的，那么通常会调用resolve(messsage)，这个时候，后续的then会被回调。</p><p>如果是失败的，那么通常会调用reject(error)，这个时候，后续的catch会被回调。</p><hr><h3 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h3><p>在我们开发中有异步操作时, 可以给异步操作包装一个Promise，异步操作之后会有三种状态。</p><p><code>pending</code>：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p><p><code>fulfill</code>：满足状态，当主动回调了resolve时，就处于该状态，并且会回调.then()。</p><p><code>reject</code>：拒绝状态，当主动回调了reject时，就处于该状态，并且会回调.catch()。</p><hr><h3 id="Promise的链式调用"><a href="#Promise的链式调用" class="headerlink" title="Promise的链式调用"></a>Promise的链式调用</h3><p>执行then还是catch的时候都可以返回一个Promise对象，代码是可以进行链式调用的。</p><p><code>Promise.resovle()</code>：将数据包装成Promise对象，并且在内部回调<code>resolve()</code>函数。</p><p><code>Promise.reject()</code>：将数据包装成Promise对象，并且在内部回调<code>reject()</code>函数。</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gcaafxd2nvj30bq0ba0tr.jpg" alt=""></div><div class="image-caption"></div></figure><hr><h3 id="Promis的all方法使用"><a href="#Promis的all方法使用" class="headerlink" title="Promis的all方法使用"></a>Promis的all方法使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送两次或多次请求可用Promise.call方法</span></span><br><span class="line">  <span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(&#123;<span class="attr">name</span>:<span class="string">'abc'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;) <span class="comment">//可对象 可字符串</span></span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'result 2 !'</span>) <span class="comment">//可对象 可字符串</span></span><br><span class="line">      &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">  ]).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(results); <span class="comment">//返回一个数组来保存</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://weibo.com/u/5887943391?is_hot=1" target="_blank" rel="noopener">coderwhy</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2020/02/25/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2020/02/25/Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><h2 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h2><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gc8wfaeorqj30u023zn79.jpg" alt=""></div><div class="image-caption"></div></figure><hr><ul><li>new Vue——&gt;创建一个vue实例</li><li>init()——&gt;初始化空的vue对象</li><li>beforecreate——&gt;data &amp; methods 还未初始化</li><li>created——&gt;data &amp; methods 已经初始化好，此时可调用methods方法、使用data中的数据(最早)</li><li>compile template——&gt;编译模板在内存中生成DOM树，但此时未加载到页面上</li><li>beforeMount——&gt;模板尚未挂载至页面，页面仍未更新</li><li>create vm.$el &amp; replace el with it——&gt;将内存中编译好的模板替换至页面上,此时可操作页面Dom(最早)</li><li>mounted——&gt;实例初始化加载完毕，进入运行阶段</li><li>beforeUpdate——&gt;data changed,data中数据已更新，页面上的数据仍未更新</li><li>virtual DOM re-render and patch——&gt;根据data的数据在内存中重新渲染新DOM树，更新完毕再将其渲染到页面- (model—&gt;view)</li><li>updated——&gt;页面中的data更新了</li><li>beforeDestroy——&gt;运行—&gt;销毁，此时data/methods等仍可用，并未真正销毁</li><li>destroyed——&gt;everything is null</li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅Vuejs</title>
      <link href="/2020/02/25/%E9%82%82%E9%80%85Vuejs/"/>
      <url>/2020/02/25/%E9%82%82%E9%80%85Vuejs/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><h2 id="简单认识Vuejs"><a href="#简单认识Vuejs" class="headerlink" title="简单认识Vuejs"></a>简单认识Vuejs</h2><hr><h4 id="为什么要学习Vuejs？"><a href="#为什么要学习Vuejs？" class="headerlink" title="为什么要学习Vuejs？"></a>为什么要学习Vuejs？</h4><ul><li>招聘前端的需求中，10个有8个都对Vue有或多或少的要求。</li><li>当然，作为学习者我们知道Vuejs目前非常火，可以说是前端必备的一个技能。</li><li>近两年前端技术变革速度太快，vue不论针对web项目开发，网站制作，还是app，小程序开发，都越来越流行，其便捷性及易用程度都让你不得不考虑去学习。</li></ul><hr><h4 id="Vuejs是什么？"><a href="#Vuejs是什么？" class="headerlink" title="Vuejs是什么？"></a>Vuejs是什么？</h4><ul><li><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a>是一个渐进式的框架，那什么是渐进式的呢？</p><ul><li>渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。</li><li>或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。</li><li>比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。</li></ul></li><li><p>Vue有很多特点和Web开发中常见的高级功能</p><ul><li>解耦视图和数据</li><li>可复用的组件</li><li>前端路由技术</li><li>状态管理</li><li>虚拟DOM</li></ul></li><li><p>学习Vuejs的前提？</p><ul><li>需具备一定的HTML、CSS、JavaScript基础。</li></ul></li></ul><hr><h2 id="开始Vue-js之旅"><a href="#开始Vue-js之旅" class="headerlink" title="开始Vue.js之旅"></a>开始Vue.js之旅</h2><h4 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h4><p>使用一个框架之前我们要下载安装它。</p><p>方式一：直接CDN引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt; </span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>方式二：下载和引入<br>开发环境 <a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a><br>生产环境 <a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></p><p>方式三：NPM安装</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于搭建此博客</title>
      <link href="/2020/02/23/%E6%AD%A4%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/02/23/%E6%AD%A4%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Mar 13 2020 13:35:04 GMT+0800 (GMT+08:00) --><h2 id="搭建前工作"><a href="#搭建前工作" class="headerlink" title="搭建前工作"></a>搭建前工作</h2><hr><h3 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h3><ul><li><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">MarkDown</a></p><ul><li><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></li><li><p>语法简洁明了、学习容易，而且功能比纯文本更强。</p></li></ul></li></ul><h3 id="搭建平台"><a href="#搭建平台" class="headerlink" title="搭建平台"></a>搭建平台</h3><ul><li><p><a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a></p><ul><li><p>GitHub Pages旨在从GitHub存储库托管您的个人，组织或项目页面。</p></li><li><p>面对全球最大的开源社区,用户生态良好</p></li><li><p>国内访问速度慢</p></li></ul></li></ul><h3 id="框架主题"><a href="#框架主题" class="headerlink" title="框架主题"></a>框架主题</h3><ul><li><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></p><ul><li><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></li><li><p>插件丰富,拓展性强</p></li></ul></li><li><p><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">hexo-theme-material-indigo</a></p><ul><li><p>Material Design 风格的Hexo主题，基于 Hexo 3.0+ 制作。</p></li><li><p>去jQuery化以提高代码速度,更加相信现代浏览器的原生兼容性</p></li></ul></li></ul><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ul><li><p><a href="https://github.com/" target="_blank" rel="noopener">Git</a></p><blockquote><p>用来管理博客代码</p></blockquote></li><li><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a></p><blockquote><p>Hexo基于Node.js开发,下载Hexo及其主题与插件都需要用到其中的npm工具</p></blockquote></li></ul><hr><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p>所有的命令指令都需要在Hexo根目录下执行</p><h3 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装<code>hexo</code>框架</h3><ol><li><p>打开命令行(管理者模式),通过<code>npm</code>工具下载<code>hexo</code>框架</p><blockquote><p>npm install hexo-cli -g</p></blockquote></li><li><p>创建一个<code>blog</code>文件夹,并在这个文件夹中初始化一个<code>hexo</code>框架</p><blockquote><p>hexo init blog</p></blockquote></li><li><p>进入<code>blog</code>文件夹,也就是整个Hexo站点的根目录</p><blockquote><p>cd blog</p></blockquote></li><li><p>安装<code>hexo</code>所需要的文件</p><blockquote><p>npm install</p></blockquote></li><li><p>启动hexo</p><blockquote><p>hexo server #简写 hexo s</p></blockquote><p>通过<code>http://localhost:4000/</code>在浏览器中访问生成的博客</p></li></ol><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote><p>_config.yml： //Hexo配置文件,网站的配置信息<br>node_modules： //依赖包<br>public： //存放生成的页面<br>scaffolds： //生成文章的一些模板<br>themes： //存放主题包<br>source： //用来存放你的文章</p><blockquote><p>_drafts： //草稿<br>_posts： //文章</p></blockquote></blockquote><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>在文件根目录下的<code>_config.yml</code>文件配置，详细参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方的配置</a>描述。</p><h3 id="indigo安装与配置"><a href="#indigo安装与配置" class="headerlink" title="indigo安装与配置"></a>indigo安装与配置</h3><ul><li><h3 id="indigo安装"><a href="#indigo安装" class="headerlink" title="indigo安装"></a>indigo安装</h3><ul><li><p>使用git命令，执行以下命令安装</p><blockquote><p>git clone <a href="https://github.com/yscoder/hexo-theme-indigo.git" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo.git</a></p></blockquote></li><li><p>安装完打开<code>themes</code>文件夹可看见相对于的主题文件</p></li><li><p>打开根目录下的<code>_config.yml</code>对<code>theme</code>属性编辑</p><blockquote><p>theme: indigo #这里填写的主题名字</p></blockquote></li><li><p>在命令行输入<code>hexo g</code> 生成静态文件</p></li><li><p>再输入<code>hexo s</code>进行重启服务器</p></li><li><p>通过<code>http://localhost:4000/</code>在浏览器中访问生成的主题博客</p></li></ul></li></ul><h3 id="indigo配置"><a href="#indigo配置" class="headerlink" title="indigo配置"></a>indigo配置</h3><p>修改主题目录下的<code>_config.yml</code>文件,详细可参考<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">主题作者的配置说明</a>描述。</p><h3 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h3><blockquote><p>hexo clean #清除本地缓存,也可以跳过这一步<br>hexo generate #生成静态资源 简写:hexo g<br>hexo deploy #部署资源 简写:hexo d</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
